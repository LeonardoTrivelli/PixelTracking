version: "3.8"

services:
  python_service:
    build:
      context: ./services/python
      dockerfile: Dockerfile.python
    container_name: python_pixel_service
    restart: always
    env_file:
      - .env
    command: uvicorn app:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./services/python:/app
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - my_network
    ports:
      - 8000:8000  # Expose to the host
  mysql:
    build:
        context: ./services/mysql
        dockerfile: Dockerfile.mysql
    volumes:
      - ./data:/var/lib/mysql
      - ./certs:/etc/mysql/certs
    container_name: mysql_pixel_service
    command:
      - --ssl-ca=/etc/mysql/certs/ca.crt
      - --ssl-cert=/etc/mysql/certs/mysql.crt
      - --ssl-key=/etc/mysql/certs/mysql.key
      - --ssl=1
      - --bind-address=0.0.0.0
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    env_file:
      - .env
    networks:
      - my_network
    ports:
      - 3306:3306  # Expose to other containers, but not the host

  redis:
    image: redis:7.4.2
    container_name: redis_service
    restart: always
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD} 
      --masterauth ${REDIS_ROOT_PASSWORD} 
      --maxmemory 200mb 
      --maxmemory-policy allkeys-lru
    volumes:
      - ./redis_data:/data
    networks:
      - my_network
    env_file:
      - .env
    # No ports section to keep Redis internal
  prometheus:
    image: docker.io/prom/prometheus:v3.2.1
    container_name: prometheus_service
    networks:
      - my_network
    ports:
      - 9090:9090
    command: "--config.file=/etc/prometheus/prometheus.yaml"
    volumes:
      - ./config:/etc/prometheus
      - prometheus-data:/prometheus
    restart: unless-stopped
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.51.0
    container_name: cadvisor
    networks:
      - my_network
    expose:
      - "8080"
    volumes:
      - /:/rootfs:ro
      - /run:/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    privileged: true
    restart: unless-stopped

  grafana:
    image: docker.io/grafana/grafana-oss:11.5.2
    container_name: grafana
    networks:
      - my_network
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped
  cert-gen:
    image: alpine
    volumes:
      - ./certs:/certs
    entrypoint:
      - /bin/sh
      - -c
      - |
        apk add --no-cache openssl &&
        openssl genpkey -algorithm RSA -out /certs/mysql.key -pkeyopt rsa_keygen_bits:2048 &&
        openssl req -new -key /certs/mysql.key -out /certs/mysql.csr -subj "/CN=mysql/O=myorg/C=US" &&
        openssl x509 -req -in /certs/mysql.csr -signkey /certs/mysql.key -out /certs/mysql.crt -days 365 &&
        openssl genpkey -algorithm RSA -out /certs/ca.key -pkeyopt rsa_keygen_bits:2048 &&
        openssl req -new -x509 -key /certs/ca.key -out /certs/ca.crt -days 1095 -subj "/CN=Certificate Authority/O=myorg/C=US" &&
        chmod 600 /certs/* && chown 999:999 /certs/*
    restart: "no"

volumes:
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  my_network:
    driver: bridge